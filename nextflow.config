/*
============================================================================================
   Nextflow config file for microbeannotator Nextflow pipeline
============================================================================================
 	Adapted from the nf-core Nextflow base config file.
	
	Workflow to assess pathway presence/absence using microbeannotator, 
	given a set of fasta amino acid sequences from metagenomes or metatranscriptomes.
	
	Companion pipeline to https://github.com/Chiamh/meta-omics-nf
--------------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {
	
	pipelineVersion					= '1.0'
	help 						= false
	
	// Input options
    mtx_annotations					= null
    mgx_annotations					= null
	mtx_protein_seqs 			    = null
	mgx_protein_seqs				= null
	process_rna						= true
	process_dna						= true
	
	//Pipeline output options
	outdir              				= './pipeline_results'
	tracedir            				= "${params.outdir}/pipeline_info"
	
	//Protein References (fasta amino acid files)
	pangene_seqs					= null
	uniref90_seqs					= null
	
	//Software databases
	microbeannotator_db 			= null
	
	// AWS parameters
	awsregion 					= false
	awsqueue					= false
	
	// Max resource options
    // Defaults only, can be overwritten
    max_memory                 	= '200.GB'
    max_cpus                   	= 40
    max_time                   	= '240.h'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
   docker {
        docker.enabled         = true
        docker.userEmulation   = true
	docker.runOptions = "--memory-swap '-1'"
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
	   
	includeConfig 'conf/docker.config'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
		
	includeConfig 'conf/singularity.config'
    }
    slurm {
      	includeConfig 'conf/docker.config'
	includeConfig 'conf/slurm.config'
	}
	sge {
      	includeConfig 'conf/docker.config'
	includeConfig 'conf/sge.config'
    }
     test {
	includeConfig 'conf/test.config'
    }
     awsbatch {
      	includeConfig 'conf/docker.config'
	includeConfig 'conf/awsbatch.config'
    }
}


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Nextflow log options
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}


manifest {
    name            = 'Chiamh/alignment-nf'
    author          = 'Minghao Chia'
    homePage        = 'https://github.com/Chiamh/alignment-nf'
    description     = 'Nextflow pipeline for meta-omic sequence alignment'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.04.0'
    version         = '1.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
